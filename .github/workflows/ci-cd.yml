name: CI/CD Pipeline - Frontend Deployment

# terraform 워크플로우가 실행된 후 실행
on:
  workflow_run:
    workflows: ["Terraform-dev"]  # terraform.yml 워크플로우 파일 내의 name 값과 일치해야 합니다.
    types:
      - completed

jobs:
  build-deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      # 소스 코드를 체크아웃합니다.
      - name: Checkout code
        uses: actions/checkout@v2

      # Node.js 환경을 설정합니다.
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # 프론트엔드 의존성 설치 (src/frontend 폴더 내 package.json 사용)
      - name: Install dependencies
        working-directory: ./src/frontend
        run: npm install

      # React 애플리케이션 빌드 (빌드 결과는 기본적으로 ./build 폴더에 생성)
      - name: Build React App
        working-directory: ./src/frontend
        run: npm run build

      # 빌드된 정적 파일들을 S3 버킷에 업로드합니다.
      - name: Deploy to S3
        run: |
          aws s3 sync ./src/frontend/build s3://${{ secrets.AWS_S3_BUCKET }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "ap-northeast-2"

      # CloudFront 배포의 캐시를 무효화하여 최신 컨텐츠가 반영되도록 합니다.
      # secrets.CLOUDFRONT_DISTRIBUTION_ID는 aws 콘솔에서 찾아서 시크릿키의 직접 입력해야 함... 추후 자동화
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "ap-northeast-2"
